<?php

/**
 * @file
 * Install, update, and uninstall functions for the Shortlink Manager module.
 */

declare(strict_types=1);

/**
 * Implements hook_schema().
 *
 * Only define tables that are not generated from entity baseFieldDefinitions().
 */
function shortlink_manager_schema(): array {
  $schema = [];

  // Only define custom/non-entity tables here.
  $schema['shortlink_revision'] = [
    'description' => 'The revision table for shortlink entities.',
    'fields' => [
      'id' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The Shortlink ID.',
      ],
      'revision_id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'The revision ID.',
      ],
      'langcode' => [
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => 'en',
        'description' => 'The shortlink language code.',
      ],
    ],
    'primary key' => ['revision_id'],
    'indexes' => [
      'id' => ['id'],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function shortlink_manager_uninstall($is_syncing) {
  $entity_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $entity_update_manager->getEntityType('shortlink');
  if ($entity_type) {
    $entity_update_manager->uninstallEntityType($entity_type);
  }
}

/**
 * Update shortlink base table to include missing core entity fields.
 */
function shortlink_manager_update_10501(&$sandbox) {
  $schema = \Drupal::database()->schema();

  // UUID column.
  if (!$schema->fieldExists('shortlink', 'uuid')) {
    $schema->addField('shortlink', 'uuid', [
      'type' => 'varchar',
      'length' => 128,
      'not null' => FALSE,
      'description' => 'The UUID of the Shortlink entity.',
    ]);
  }

  // Language code column.
  if (!$schema->fieldExists('shortlink', 'langcode')) {
    $schema->addField('shortlink', 'langcode', [
      'type' => 'varchar',
      'length' => 12,
      'not null' => FALSE,
      'description' => 'The language code.',
    ]);
  }

  // Created timestamp column.
  if (!$schema->fieldExists('shortlink', 'created')) {
    $schema->addField('shortlink', 'created', [
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
      'description' => 'The time that the shortlink was created.',
    ]);
  }

  // Changed timestamp column.
  if (!$schema->fieldExists('shortlink', 'changed')) {
    $schema->addField('shortlink', 'changed', [
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
      'description' => 'The time that the shortlink was last edited.',
    ]);
  }
}

/**
 * Add the 'custom_parameters' property to the utm_set configuration entity.
 */
function shortlink_manager_update_10502(&$sandbox): void {
  // Get the entity type manager service.
  $entity_type_manager = \Drupal::entityTypeManager();

  // Load the IDs of all existing UTM Set entities.
  $utm_set_ids = $entity_type_manager->getStorage('utm_set')
    ->getQuery()
    ->accessCheck(FALSE)
    ->execute();

  if (empty($utm_set_ids)) {
    // If no entities exist, we can stop here.
    return;
  }

  // Load the configuration storage handler.
  $config_storage = \Drupal::service('config.storage');

  // Loop through all existing UTM Sets.
  foreach ($utm_set_ids as $id) {
    // The full configuration name for the entity.
    $config_name = 'shortlink_manager.utm_set.' . $id;

    // Load the configuration data directly.
    if ($data = $config_storage->read($config_name)) {

      // Check if the property already exists (e.g., if this update was re-run).
      if (!isset($data['custom_parameters'])) {
        // Add the new property with its default value.
        $data['custom_parameters'] = [];

        // Save the updated configuration data.
        $config_storage->write($config_name, $data);
      }
    }
  }
}

/**
 * Add default passthrough UTM parameters.
 */
function shorlink_manager_update_10503(&$sandbox): void {
  $config = \Drupal::configFactory()->getEditable('shortlink_manager.settings');

  if ($config->get('passthrough_parameters') === NULL) {
    $default_passthrough = [
      "utm_source",
      "utm_medium",
      "utm_campaign",
      "utm_term",
      "utm_content",
    ];
    $config->set('passthrough_parameters', $default_passthrough);
    $config->save();
  }
}
